/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'java-library'
    id 'application'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)  // or your installed version
    }
}

application {
    // Choose the class that has your main(String[] args)
    mainClass = 'sim.core.BenchMain'
    
    // If your main is in Demo instead, use: 'sim.core.Demo'
    
}

test {
    useJUnitPlatform()

    // Allow running a subset of tests by tag, e.g. -PincludeTags=bench
    if (project.hasProperty('includeTags')) {
        systemProperty 'junit.jupiter.tags', project.property('includeTags')
    }

    // Show System.out from tests
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showStandardStreams = true
    }
}




repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

    // Use JUnit Jupiter for testing.
    // testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    // implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
// tasks.register('logicDot', JavaExec) {
//     classpath = sourceSets.main.runtimeClasspath
//     mainClass = 'sim.demo.GraphvizDemo'
// }
// tasks.register('faDot', JavaExec) {
//     group = 'demo'
//     description = 'Generate Full Adder DOT and PNG via GraphvizFADemo'
//     classpath = sourceSets.main.runtimeClasspath
// //     mainClass = 'sim.demo.GraphvizFADemo'
// }

// ---- Demo: generate Full Adder DOT + PNG ----
tasks.register('logicDot', JavaExec) {
    group = 'demo'
    description = 'Generate logic DOT/PNG via GraphvizDemo'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'sim.demo.GraphvizDemo'
}

tasks.register('faDot', JavaExec) {
    group = 'demo'
    description = 'Generate Full Adder DOT/PNG via GraphvizFADemo'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'sim.demo.GraphvizFADemo'
}

tasks.register('dotAll') {
    group = 'demo'
    description = 'Generate both logic and full-adder Graphviz images'
    dependsOn 'logicDot', 'faDot'
}
